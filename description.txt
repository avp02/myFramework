Задача: с использованием пакета java.lang.reflect реализовать простейшую версию DI-контейнера,
представленную интерфейсом Injector.

Требования к реализации:

1. Реализация должна быть упакована в ZIP файл, содержащий директорию с именем interview-di-[первая_буква_имени+фамилия],
Пример: interview-di-apetrov
2. В файле pom.xml необходимо установить значение тега <artifactId>, используя следующий формат: [первая_буква_имени+фамилия]
Пример: apetrov
3. Запрещается использовать сторонние библиотеки.
4. Реализацию необходимо предоставить в существующем классе InjectorImpl.
5. В первую очередь контейнер использует конструктор с аннотацией Inject. Если в классе
присутствует несколько таких конструкторов, выбрасывается ConstructorAmbiguityException.
6. При отсутствии конструкторов с аннотацией Inject используется конструктор по умолчанию. При
отсутствии такового выбрасывается NoSuitableConstructorException.
7. Если контейнер использует конструктор с аннотацией Inject и для какого-либо аргумента контейнер
не может найти binding, выбрасывается BindingNotFoundException.
8. В свою очередь, если мы явно запрашиваем Provider для какого-либо класса и нет соответствующего binding,
возвращается null.
9. Реализация singleton binding'ов должна быть ленивой.
10. Реализация должна быть потокобезопасная.
11. Все вышеупомянутые exception'ы должны выбрасываться в момент попытки получения экземпляра Provider'а.

Особенности:
1. Поддержка field и method injection не требуется.
2. Все аргументы конструкторов гарантировано являются reference type'ами.
3. Все конструкторы являются public.
4. Считается, что задание binding'ов происходит единоразово, т.е. вызов методов
bind* после getProvider не допускается.
5. Поддержка циклических зависимостей не требуется.